<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="$(SolutionDir)SourceCodeGeneration.Tests\bin\Debug\SourceCodeGeneration.dll" #>
<#@ Assembly Name="$(TargetPath)" #>
<#@ import namespace="SourceCodeGeneration" #>
<#@ import namespace="SourceCodeGeneration.Tests" #>
<#
	var wrappedType = typeof(SampleClass);					//<<<<<======= put here your class, dont forget to import the right
	var className = wrappedType.Name + "Wrapper";			//<<<<<======= the name of the resulting wrapper class
	var namespace2 = wrappedType.Namespace;					//<<<<<======= namespace of the wrapper class
	bool createMethodsAsVirtual = true;						//<<<<<======= when true all methods will be marked as virtual
	bool createInterface = true;							//<<<<<======= when true an interface will be generated
	var interfaceName = "I" + wrappedType.Name;				//<<<<<======= name of the resulting interface

	var variableNameName = wrappedType.Name.ToLower();
	var fieldName = "_" + variableNameName;
#>
using <#= wrappedType.Namespace #>;
using System;
using System.Collections.Generic;

namespace <#= namespace2#>
{
	public partial class <#= className #>
	{
		private readonly <#=wrappedType.Name#> <#=fieldName#>;

		public <#=className#>(<#= wrappedType.Name #> <#= variableNameName #>)
		{
			<#=fieldName#> = <#= variableNameName #>;
		}

<#		
		var methods = new List<GeneratedMethod>();
		foreach (var sourceMethod in wrappedType.GetMethods(BindingFlags.Public | BindingFlags.Instance)
                .Where(x => !x.IsSpecialName)
                .Where(x => x.DeclaringType != typeof(object)))
        {
			var hasReturnType = sourceMethod.ReturnType != typeof(void);
			var returnType = hasReturnType ? CSharpSourceCodeGeneration.GetSafeTypeName(sourceMethod.ReturnType) : "void";
			var returnStatement = hasReturnType ? "return " : "";
			var typeParameters = (sourceMethod.IsGenericMethod) ? "<" + CSharpSourceCodeGeneration.GetTypeParameters(sourceMethod) + ">" : "";
			var methodParamters = string.Join(", ", sourceMethod.GetParameters().Select(x => CSharpSourceCodeGeneration.GetParameterType(x)).ToArray());
			var genericContraints = CSharpSourceCodeGeneration.GetTypeParametersConstrants(sourceMethod);
			var methodArguments = CSharpSourceCodeGeneration.GetInvokingMethodArguments(sourceMethod);
			var methodSignature = returnType + " " + sourceMethod.Name + typeParameters + "(" + methodParamters + ")";
			var modifier = GetMethodModifier(sourceMethod);
			if (modifier == null)
			{
				methods.Add(new GeneratedMethod { Signature = methodSignature, Constraints = genericContraints });
				modifier = createMethodsAsVirtual ? "virtual " : "";
			}
			else
			{
				modifier += " ";
			}
#>
		public <#= modifier #><#=methodSignature#> <#
			RenderGenericConstraints(genericContraints); #>
		
		{
			<#=returnStatement + fieldName #>.<#=sourceMethod.Name + typeParameters#>(<#=methodArguments #>);
		}
<#
		}
		#>
	}
<#	if (createInterface)
	{
#>
	public partial interface <#= interfaceName #>		
	{
<#		foreach(var method in methods)
		{
			PushIndent("      ");
			WriteLine("");
			Write(method.Signature);
			ClearIndent();
			RenderGenericConstraints(method.Constraints);
			WriteLine(";");
		} #>
	}
<#	}#>
}

<#+
	string GetMethodModifier(MethodInfo method)
	{
		var methods = typeof(object).GetMethods().Where(x => method.Name == x.Name
			&& method.GetParameters().Select(p => p.ParameterType.FullName + p.Name).SequenceEqual(x.GetParameters().Select(p => p.ParameterType.FullName + p.Name)));
		var baseMethod = methods.FirstOrDefault();
		if (baseMethod == null)
		{
			return null;
		}
		return baseMethod.IsVirtual ? "override" : "new";
	}

	bool RenderGenericConstraints(IEnumerable<string> genericContraints)
	{
		if (genericContraints.Any())
		{
			WriteLine("");
			PushIndent("      ");
			var items = genericContraints.ToArray();
			for(int i = 0; i < items.Length; i++)
			{
				if (i > 0)
				{
					WriteLine("");
				}
				Write(CurrentIndent + "where " + items[i]);
			}
			ClearIndent();
			return true;
		}
		return false;
	}


	class GeneratedMethod
	{
		public string Signature { get;set;}
		public IEnumerable<string> Constraints {get;set;}
	}

#>